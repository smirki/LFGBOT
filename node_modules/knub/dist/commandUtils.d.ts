import { Client, Message } from "eris";
import { ICommandConfig, ICommandDefinition, CommandManager, TTypeConverterFn, TSignature } from "knub-command-manager";
import { Plugin } from "./Plugin";
import { Lock } from "./LockManager";
export declare function getDefaultPrefix(client: Client): RegExp;
export interface ICommandExtraData {
    requiredPermission?: string;
    allowDMs?: boolean;
    locks?: string | string[];
    cooldown?: number;
    cooldownPermission?: string;
    info?: any;
    _lock?: Lock;
}
export interface ICommandContext {
    message: Message;
    bot: Client;
    plugin: Plugin<any>;
}
export interface IPluginCommandDefinition extends ICommandDefinition<ICommandContext, ICommandExtraData> {
}
export interface IPluginCommandConfig extends ICommandConfig<ICommandContext, ICommandExtraData> {
}
export interface IPluginCommandManager extends CommandManager<ICommandContext, ICommandExtraData> {
}
export interface ICustomArgumentTypesMap {
    [key: string]: TTypeConverterFn<ICommandContext>;
}
export interface ICommandHandlerArgsArg {
    [key: string]: any;
}
export declare type TCommandHandler = (msg: Message, argsToPass: ICommandHandlerArgsArg, command: ICommandDefinition<ICommandContext, ICommandExtraData>) => void | Promise<void>;
export declare function createCommandTriggerRegexp(src: string | RegExp): RegExp;
/**
 * Returns a readable command signature string for the given command.
 * Trigger is passed as a string instead of using the "triggers" property of the command to allow choosing which
 * trigger of potentially multiple ones to show and in what format.
 */
export declare function getCommandSignature(command: ICommandDefinition<ICommandContext, ICommandExtraData>, overrideTrigger?: string, overrideSignature?: TSignature): string;
