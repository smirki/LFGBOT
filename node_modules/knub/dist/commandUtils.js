"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const knub_command_manager_1 = require("knub-command-manager");
const escape_string_regexp_1 = __importDefault(require("escape-string-regexp"));
function getDefaultPrefix(client) {
    return new RegExp(`<@!?${client.user.id}> `);
}
exports.getDefaultPrefix = getDefaultPrefix;
function createCommandTriggerRegexp(src) {
    return typeof src === "string" ? new RegExp(escape_string_regexp_1.default(src), "i") : src;
}
exports.createCommandTriggerRegexp = createCommandTriggerRegexp;
/**
 * Returns a readable command signature string for the given command.
 * Trigger is passed as a string instead of using the "triggers" property of the command to allow choosing which
 * trigger of potentially multiple ones to show and in what format.
 */
function getCommandSignature(command, overrideTrigger, overrideSignature) {
    const signature = overrideSignature || command.signatures[0];
    const paramStrings = signature.map(param => {
        return param.required ? `<${param.name}>` : `[${param.name}]`;
    });
    const optStrings = (command.options || []).map(opt => {
        const required = knub_command_manager_1.isSwitchOption(opt) ? false : opt.required;
        return required ? `<-${opt.name}>` : `[-${opt.name}]`;
    });
    const prefix = command.originalPrefix != null
        ? typeof command.originalPrefix === "string"
            ? command.originalPrefix
            : command.originalPrefix.source
        : null;
    const trigger = overrideTrigger != null
        ? overrideTrigger
        : typeof command.originalTriggers[0] === "string"
            ? command.originalTriggers[0]
            : command.originalTriggers[0].source;
    const usageLine = `${prefix}${trigger} ${paramStrings.join(" ")} ${optStrings.join(" ")}`.replace(/\s+/g, " ").trim();
    return usageLine;
}
exports.getCommandSignature = getCommandSignature;
//# sourceMappingURL=commandUtils.js.map