import { ICommandConfig, IParameter, TParseableSignature } from "knub-command-manager";
import { ICommandContext, ICommandExtraData } from "./commandUtils";
export interface ICommandDecoratorData {
    trigger: string | RegExp;
    parameters: TParseableSignature;
    config: ICommandConfig<any, ICommandExtraData>;
    _prop: string;
}
export interface IEventDecoratorData {
    eventName: string;
    restrict: string;
    ignoreSelf: boolean;
    requiredPermission: string;
    locks: string | string[];
    _prop: string;
}
export interface IPermissionDecoratorData {
    permission: string;
    _prop: string;
}
export interface ILockDecoratorData {
    locks: string | string[];
    _prop: string;
}
export interface ICooldownDecoratorData {
    time: number;
    permission: string;
    _prop: string;
}
/**
 * PLUGINS: Turn a class method into a command handler
 */
declare function CommandDecorator(trigger: string | RegExp, parameters?: string | IParameter[], config?: ICommandConfig<ICommandContext, ICommandExtraData>): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
/**
 * PLUGINS: Turn a class method into an event listener
 */
declare function OnEventDecorator(eventName: string, restrict?: string, ignoreSelf?: boolean, requiredPermission?: string, locks?: string | string[]): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
/**
 * PLUGINS: Augments command handlers and event listeners by adding a permission requirement
 */
declare function PermissionDecorator(permission: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
/**
 * PLUGINS: Specify which locks the command handler or event listener should wait for and lock during its execution
 */
declare function LockDecorator(locks: string | string[]): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
/**
 * PLUGINS: Specify a cooldown for a command
 */
declare function CooldownDecorator(time: number, permission?: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
declare const _default: {
    command: typeof CommandDecorator;
    event: typeof OnEventDecorator;
    permission: typeof PermissionDecorator;
    lock: typeof LockDecorator;
    cooldown: typeof CooldownDecorator;
};
export default _default;
