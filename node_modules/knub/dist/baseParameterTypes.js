"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const knub_command_manager_1 = require("knub-command-manager");
const helpers_1 = require("./helpers");
const utils_1 = require("./utils");
const eris_1 = require("eris");
exports.baseParameterTypes = Object.assign(Object.assign({}, knub_command_manager_1.defaultParameterTypes), { boolean: knub_command_manager_1.defaultParameterTypes.bool, number(value) {
        const result = parseFloat(value);
        if (Number.isNaN(result)) {
            throw new knub_command_manager_1.TypeConversionError(`\`${helpers_1.disableCodeBlocks(value)}\` is not a valid number`);
        }
        return result;
    },
    user(value, { bot }) {
        const userId = utils_1.getUserId(value);
        if (!userId) {
            throw new knub_command_manager_1.TypeConversionError(`\`${helpers_1.disableCodeBlocks(value)}\` is not a valid user`);
        }
        const user = bot.users.get(userId);
        if (!user) {
            throw new knub_command_manager_1.TypeConversionError(`Could not find user for user id \`${userId}\``);
        }
        return user;
    },
    member(value, { message, bot }) {
        if (!(message.channel instanceof eris_1.GuildChannel)) {
            throw new knub_command_manager_1.TypeConversionError(`Type 'Member' can only be used in guilds`);
        }
        const userId = utils_1.getUserId(value);
        if (!userId) {
            throw new knub_command_manager_1.TypeConversionError(`\`${helpers_1.disableCodeBlocks(value)}\` is not a valid user id`);
        }
        const user = bot.users.get(userId);
        if (!user) {
            throw new knub_command_manager_1.TypeConversionError(`Could not find user for user id \`${userId}\``);
        }
        const member = message.channel.guild.members.get(user.id);
        if (!member) {
            throw new knub_command_manager_1.TypeConversionError(`Could not find guild member for user id \`${userId}\``);
        }
        return member;
    },
    channel(value, { message, bot }) {
        const channelId = utils_1.getChannelId(value);
        if (!channelId) {
            throw new knub_command_manager_1.TypeConversionError(`\`${helpers_1.disableCodeBlocks(value)}\` is not a valid channel`);
        }
        if (!(message.channel instanceof eris_1.GuildChannel)) {
            throw new knub_command_manager_1.TypeConversionError(`Type 'Channel' can only be used in guilds`);
        }
        const guild = message.channel.guild;
        const channel = guild.channels.get(channelId);
        if (!channel) {
            throw new knub_command_manager_1.TypeConversionError(`Could not find channel for channel id \`${channelId}\``);
        }
        return channel;
    },
    textChannel(value, { message, bot }) {
        const channelId = utils_1.getChannelId(value);
        if (!channelId) {
            throw new knub_command_manager_1.TypeConversionError(`\`${helpers_1.disableCodeBlocks(value)}\` is not a valid channel`);
        }
        if (!(message.channel instanceof eris_1.GuildChannel)) {
            throw new knub_command_manager_1.TypeConversionError(`Type 'Channel' can only be used in guilds`);
        }
        const guild = message.channel.guild;
        const channel = guild.channels.get(channelId);
        if (!channel) {
            throw new knub_command_manager_1.TypeConversionError(`Could not find channel for channel id \`${channelId}\``);
        }
        if (!(channel instanceof eris_1.TextChannel)) {
            throw new knub_command_manager_1.TypeConversionError(`Channel \`${channel.name}\` is not a text channel`);
        }
        return channel;
    },
    voiceChannel(value, { message, bot }) {
        const channelId = utils_1.getChannelId(value);
        if (!channelId) {
            throw new knub_command_manager_1.TypeConversionError(`\`${helpers_1.disableCodeBlocks(value)}\` is not a valid channel`);
        }
        if (!(message.channel instanceof eris_1.GuildChannel)) {
            throw new knub_command_manager_1.TypeConversionError(`Type 'Channel' can only be used in guilds`);
        }
        const guild = message.channel.guild;
        const channel = guild.channels.get(channelId);
        if (!channel) {
            throw new knub_command_manager_1.TypeConversionError(`Could not find channel for channel id \`${channelId}\``);
        }
        if (!(channel instanceof eris_1.VoiceChannel)) {
            throw new knub_command_manager_1.TypeConversionError(`Channel \`${channel.name}\` is not a voice channel`);
        }
        return channel;
    },
    role(value, { message, bot }) {
        if (!(message.channel instanceof eris_1.GuildChannel)) {
            throw new knub_command_manager_1.TypeConversionError(`Type 'Role' can only be used in guilds`);
        }
        const roleId = utils_1.getRoleId(value);
        if (!roleId) {
            throw new knub_command_manager_1.TypeConversionError(`\`${helpers_1.disableCodeBlocks(value)}\` is not a valid role`);
        }
        const role = message.channel.guild.roles.get(roleId);
        if (!role) {
            throw new knub_command_manager_1.TypeConversionError(`Could not find role for role id \`${roleId}\``);
        }
        return role;
    },
    userId(value) {
        const userId = utils_1.getUserId(value);
        if (!userId) {
            throw new knub_command_manager_1.TypeConversionError(`\`${helpers_1.disableCodeBlocks(value)}\` is not a valid user`);
        }
        return userId;
    },
    channelId(value) {
        const channelId = utils_1.getChannelId(value);
        if (!channelId) {
            throw new knub_command_manager_1.TypeConversionError(`\`${helpers_1.disableCodeBlocks(value)}\` is not a valid channel`);
        }
        return channelId;
    } });
//# sourceMappingURL=baseParameterTypes.js.map