/// <reference types="node" />
import { Client, TextableChannel } from "eris";
import { LoggerFn } from "./logger";
import { Plugin } from "./Plugin";
import { GlobalPlugin } from "./GlobalPlugin";
import EventEmitter from "events";
import { IGlobalConfig, IGuildConfig } from "./configInterfaces";
import { LockManager } from "./LockManager";
import { ICustomArgumentTypesMap } from "./commandUtils";
declare type StatusMessageFn = (channel: TextableChannel, body: string) => void;
export interface IOptions {
    autoInitGuilds?: boolean;
    getConfig?: (id: string) => any | Promise<any>;
    getEnabledPlugins?: (guildId: string, guildConfig: IGuildConfig) => string[] | Promise<string[]>;
    canLoadGuild?: (guildId: string) => boolean | Promise<boolean>;
    logFn?: LoggerFn;
    performanceDebug?: {
        enabled?: boolean;
        size?: number;
        threshold?: number;
    };
    customArgumentTypes?: ICustomArgumentTypesMap;
    sendErrorMessageFn?: StatusMessageFn;
    sendSuccessMessageFn?: StatusMessageFn;
    [key: string]: any;
}
export interface IGuildData {
    id: string;
    config: IGuildConfig;
    loadedPlugins: Map<string, Plugin>;
    locks: LockManager;
}
declare class IExtendedPlugin extends Plugin<any> {
}
declare class IExtendedGlobalPlugin extends Plugin<any> {
}
export interface IKnubArgs {
    plugins?: Array<typeof IExtendedPlugin>;
    globalPlugins?: Array<typeof IExtendedGlobalPlugin>;
    options?: IOptions;
}
export declare type IPluginMap = Map<string, typeof IExtendedPlugin>;
export declare type IGlobalPluginMap = Map<string, typeof GlobalPlugin>;
export declare class Knub extends EventEmitter {
    protected bot: Client;
    protected globalPlugins: IGlobalPluginMap;
    protected loadedGlobalPlugins: Map<string, GlobalPlugin>;
    protected plugins: IPluginMap;
    protected options: IOptions;
    protected djsOptions: any;
    protected guilds: Map<string, IGuildData>;
    protected globalConfig: IGlobalConfig;
    protected globalLocks: LockManager;
    protected performanceDebugItems: string[];
    constructor(client: Client, userArgs: IKnubArgs);
    run(): Promise<void>;
    loadAllGuilds(): Promise<void>;
    /**
     * Initializes the specified guild's config and loads its plugins
     */
    loadGuild(guildId: string): Promise<void>;
    /**
     * Unloads all plugins in the specified guild, and removes the guild from the list of loaded guilds
     */
    unloadGuild(guildId: string): Promise<void>;
    reloadGuild(guildId: string): Promise<void>;
    getGuildData(guildId: string): IGuildData;
    getLoadedGuilds(): IGuildData[];
    loadPlugin(guildId: string, pluginName: string, guildConfig: IGuildConfig): Promise<Plugin>;
    unloadPlugin(plugin: Plugin): Promise<void>;
    reloadPlugin(plugin: Plugin): Promise<void>;
    getPlugins(): IPluginMap;
    loadGlobalPlugin(pluginName: string): Promise<GlobalPlugin>;
    unloadGlobalPlugin(plugin: GlobalPlugin): Promise<void>;
    reloadGlobalPlugin(plugin: GlobalPlugin): Promise<void>;
    reloadAllGlobalPlugins(): Promise<void>;
    loadAllGlobalPlugins(): Promise<void>;
    getGlobalPlugins(): IGlobalPluginMap;
    reloadGlobalConfig(): Promise<void>;
    loadGlobalConfig(): Promise<void>;
    getGlobalConfig(): IGlobalConfig;
    protected performanceDebugEnabled(): boolean;
    logPerformanceDebugItem(time: number, description: string): void;
    startPerformanceDebugTimer(description: any): () => void;
    getPerformanceDebugItems(): string[];
    getCustomArgumentTypes(): ICustomArgumentTypesMap;
    sendErrorMessage(channel: TextableChannel, body: string): void;
    sendSuccessMessage(channel: TextableChannel, body: string): void;
}
export {};
