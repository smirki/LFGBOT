"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function get(obj, path, def) {
    let cursor = obj;
    const pathParts = path.split(".");
    for (const part of pathParts) {
        cursor = cursor[part];
        if (cursor === undefined)
            return def;
        if (cursor == null)
            return null;
    }
    return cursor;
}
exports.get = get;
const userMentionRegex = /^<@!?([0-9]+)>$/;
const channelMentionRegex = /^<#([0-9]+)>$/;
const roleMentionRegex = /^<@&([0-9]+)>$/;
const snowflakeRegex = /^[1-9][0-9]{5,19}$/;
function getUserId(str) {
    str = str.trim();
    if (str.match(snowflakeRegex)) {
        // User ID
        return str;
    }
    else {
        const mentionMatch = str.match(userMentionRegex);
        if (mentionMatch) {
            return mentionMatch[1];
        }
    }
    return null;
}
exports.getUserId = getUserId;
function getChannelId(str) {
    str = str.trim();
    if (str.match(snowflakeRegex)) {
        // Channel ID
        return str;
    }
    else {
        const mentionMatch = str.match(channelMentionRegex);
        if (mentionMatch) {
            return mentionMatch[1];
        }
    }
    return null;
}
exports.getChannelId = getChannelId;
function getRoleId(str) {
    str = str.trim();
    if (str.match(snowflakeRegex)) {
        // Role ID
        return str;
    }
    else {
        const mentionMatch = str.match(roleMentionRegex);
        if (mentionMatch) {
            return mentionMatch[1];
        }
    }
    return null;
}
exports.getRoleId = getRoleId;
function resolveUser(bot, str) {
    const userId = getUserId(str);
    return userId && bot.users.get(userId);
}
exports.resolveUser = resolveUser;
function resolveMember(guild, str) {
    const memberId = getUserId(str);
    return memberId && guild.members.get(memberId);
}
exports.resolveMember = resolveMember;
function resolveChannel(guild, str) {
    const channelId = getChannelId(str);
    return channelId && guild.channels.get(channelId);
}
exports.resolveChannel = resolveChannel;
function resolveRole(guild, str) {
    const roleId = getRoleId(str);
    return roleId && guild.roles.get(roleId);
}
exports.resolveRole = resolveRole;
exports.noop = () => { }; // tslint:disable-line
const id = v => v;
exports.eventToGuild = {
    channelCreate: c => c.guild,
    channelDelete: c => c.guild,
    channelPinUpdate: c => c.guild,
    channelUpdate: c => c.guild,
    guildBanAdd: id,
    guildBanRemove: id,
    guildCreate: id,
    guildDelete: id,
    guildEmojisUpdate: id,
    guildMemberAdd: id,
    guildMemberRemove: id,
    guildMemberChunk: id,
    guildMemberUpdate: id,
    guildUnavailable: id,
    guildUpdate: id,
    guildRoleCreate: id,
    guildRoleDelete: id,
    guildRoleUpdate: id,
    messageCreate: m => m.channel.guild,
    messageDelete: m => m.channel.guild,
    messageDeleteBulk: c => c[0] && c[0].channel && c[0].channel.guild,
    messageReactionAdd: m => m.channel.guild,
    messageReactionRemove: m => m.channel.guild,
    messageReactionRemoveAll: m => m.channel.guild,
    messageUpdate: m => m.channel.guild,
    presenceUpdate: m => m.guild,
    typingStart: c => c && c.guild,
    voiceChannelJoin: m => m.guild,
    voiceChannelLeave: m => m.guild,
    voiceChannelSwitch: m => m.guild,
    voiceStateUpdate: m => m.guild,
    unavailableGuildCreate: id
};
exports.eventToUser = {
    guildBanAdd: (_, u) => u,
    guildBanRemove: (_, u) => u,
    guildMemberAdd: (_, m) => m.user,
    guildMemberChunk: (_, m) => m[0] && m[0].user,
    guildMemberRemove: m => m.user,
    guildMemberUpdate: (_, m) => m.user,
    messageCreate: m => m.author,
    messageDelete: m => m.author,
    messageDeleteBulk: m => m[0] && m.author,
    messageReactionAdd: (m, _, uId) => {
        const member = m.channel.guild && m.channel.guild.members.get(uId);
        return member && member.user;
    },
    messageReactionRemove: (m, _, uId) => {
        const member = m.channel.guild && m.channel.guild.members.get(uId);
        return member && member.user;
    },
    messageUpdate: m => m.author,
    presenceUpdate: m => m.user,
    typingStart: (_, u) => u,
    userUpdate: id,
    voiceStateUpdate: m => m.user
};
exports.eventToChannel = {
    messageCreate: m => m.channel,
    messageDelete: m => m.channel,
    messageDeleteBulk: m => m[0] && m.channel,
    messageReactionAdd: m => m.channel,
    messageReactionRemove: m => m.channel,
    messageReactionUpdate: m => m.channel,
    channelCreate: id,
    channelDelete: id,
    channelPinsUpdate: id,
    channelUpdate: id,
    channelRecipientAdd: id,
    channelRecipientRemove: id,
    typingStart: id,
    voiceChannelJoin: (_, c) => c,
    voiceChannelLeave: (_, c) => c,
    voiceChannelSwitch: (_, c) => c
};
exports.eventToMessage = {
    messageCreate: id,
    messageDelete: id,
    messageDeleteBulk: m => m[0],
    messageReactionAdd: id,
    messageReactionRemove: id,
    messageReactionRemoveAll: id,
    messageUpdate: id
};
//# sourceMappingURL=utils.js.map