import { IPluginOptions, IPluginOverrideCriteria } from "./configInterfaces";
export interface IMatchParams {
    level?: number;
    userId?: string;
    memberRoles?: string[];
    channelId?: string;
    categoryId?: string;
    extra?: any;
}
/**
 * Basic deep merge with support for specifying merge "rules" with key prefixes.
 * For example, prefixing the key of a property containing an array with "+" would concat the two arrays, while
 * a prefix of "-" would calculate the difference ("remove items").
 *
 * Using '*' as a key will set that value to all known properties in the config at that time.
 * This is mostly used for permissions.
 *
 * @param {T} target
 * @param {T} sources
 * @returns {T}
 */
export declare function mergeConfig<T extends {}>(...sources: any[]): T;
declare type CustomOverrideResolver<T> = (criteria: T, matchParams: IMatchParams) => boolean | Promise<boolean>;
/**
 * Returns matching plugin options for the specified matchParams based on overrides
 */
export declare function getMatchingPluginConfig<TConfig, TCustomOverrideCriteria = unknown, TPluginOptions extends IPluginOptions<TConfig, TCustomOverrideCriteria> = IPluginOptions<TConfig, TCustomOverrideCriteria>>(pluginOptions: TPluginOptions, matchParams: IMatchParams, customOverrideCriteriaResolver?: CustomOverrideResolver<TCustomOverrideCriteria>): TConfig;
export declare function evaluateOverrideCriteria<TCustomOverrideCriteria = unknown>(criteria: IPluginOverrideCriteria<TCustomOverrideCriteria>, matchParams: IMatchParams, customOverrideCriteriaResolver?: CustomOverrideResolver<TCustomOverrideCriteria>): boolean;
export {};
